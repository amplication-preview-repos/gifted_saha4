/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PlagiarismCheck } from "./PlagiarismCheck";
import { PlagiarismCheckCountArgs } from "./PlagiarismCheckCountArgs";
import { PlagiarismCheckFindManyArgs } from "./PlagiarismCheckFindManyArgs";
import { PlagiarismCheckFindUniqueArgs } from "./PlagiarismCheckFindUniqueArgs";
import { CreatePlagiarismCheckArgs } from "./CreatePlagiarismCheckArgs";
import { UpdatePlagiarismCheckArgs } from "./UpdatePlagiarismCheckArgs";
import { DeletePlagiarismCheckArgs } from "./DeletePlagiarismCheckArgs";
import { CheckResult } from "../../checkResult/base/CheckResult";
import { Document } from "../../document/base/Document";
import { PlagiarismCheckService } from "../plagiarismCheck.service";
@graphql.Resolver(() => PlagiarismCheck)
export class PlagiarismCheckResolverBase {
  constructor(protected readonly service: PlagiarismCheckService) {}

  async _plagiarismChecksMeta(
    @graphql.Args() args: PlagiarismCheckCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PlagiarismCheck])
  async plagiarismChecks(
    @graphql.Args() args: PlagiarismCheckFindManyArgs
  ): Promise<PlagiarismCheck[]> {
    return this.service.plagiarismChecks(args);
  }

  @graphql.Query(() => PlagiarismCheck, { nullable: true })
  async plagiarismCheck(
    @graphql.Args() args: PlagiarismCheckFindUniqueArgs
  ): Promise<PlagiarismCheck | null> {
    const result = await this.service.plagiarismCheck(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PlagiarismCheck)
  async createPlagiarismCheck(
    @graphql.Args() args: CreatePlagiarismCheckArgs
  ): Promise<PlagiarismCheck> {
    return await this.service.createPlagiarismCheck({
      ...args,
      data: {
        ...args.data,

        checkResult: args.data.checkResult
          ? {
              connect: args.data.checkResult,
            }
          : undefined,

        document: args.data.document
          ? {
              connect: args.data.document,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => PlagiarismCheck)
  async updatePlagiarismCheck(
    @graphql.Args() args: UpdatePlagiarismCheckArgs
  ): Promise<PlagiarismCheck | null> {
    try {
      return await this.service.updatePlagiarismCheck({
        ...args,
        data: {
          ...args.data,

          checkResult: args.data.checkResult
            ? {
                connect: args.data.checkResult,
              }
            : undefined,

          document: args.data.document
            ? {
                connect: args.data.document,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PlagiarismCheck)
  async deletePlagiarismCheck(
    @graphql.Args() args: DeletePlagiarismCheckArgs
  ): Promise<PlagiarismCheck | null> {
    try {
      return await this.service.deletePlagiarismCheck(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => CheckResult, {
    nullable: true,
    name: "checkResult",
  })
  async getCheckResult(
    @graphql.Parent() parent: PlagiarismCheck
  ): Promise<CheckResult | null> {
    const result = await this.service.getCheckResult(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Document, {
    nullable: true,
    name: "document",
  })
  async getDocument(
    @graphql.Parent() parent: PlagiarismCheck
  ): Promise<Document | null> {
    const result = await this.service.getDocument(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
