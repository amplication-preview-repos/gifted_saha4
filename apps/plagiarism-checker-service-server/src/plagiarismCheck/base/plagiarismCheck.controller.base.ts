/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PlagiarismCheckService } from "../plagiarismCheck.service";
import { PlagiarismCheckCreateInput } from "./PlagiarismCheckCreateInput";
import { PlagiarismCheck } from "./PlagiarismCheck";
import { PlagiarismCheckFindManyArgs } from "./PlagiarismCheckFindManyArgs";
import { PlagiarismCheckWhereUniqueInput } from "./PlagiarismCheckWhereUniqueInput";
import { PlagiarismCheckUpdateInput } from "./PlagiarismCheckUpdateInput";

export class PlagiarismCheckControllerBase {
  constructor(protected readonly service: PlagiarismCheckService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PlagiarismCheck })
  async createPlagiarismCheck(
    @common.Body() data: PlagiarismCheckCreateInput
  ): Promise<PlagiarismCheck> {
    return await this.service.createPlagiarismCheck({
      data: {
        ...data,

        checkResult: data.checkResult
          ? {
              connect: data.checkResult,
            }
          : undefined,

        document: data.document
          ? {
              connect: data.document,
            }
          : undefined,
      },
      select: {
        checkResult: {
          select: {
            id: true,
          },
        },

        createdAt: true,

        document: {
          select: {
            id: true,
          },
        },

        id: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PlagiarismCheck] })
  @ApiNestedQuery(PlagiarismCheckFindManyArgs)
  async plagiarismChecks(
    @common.Req() request: Request
  ): Promise<PlagiarismCheck[]> {
    const args = plainToClass(PlagiarismCheckFindManyArgs, request.query);
    return this.service.plagiarismChecks({
      ...args,
      select: {
        checkResult: {
          select: {
            id: true,
          },
        },

        createdAt: true,

        document: {
          select: {
            id: true,
          },
        },

        id: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PlagiarismCheck })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async plagiarismCheck(
    @common.Param() params: PlagiarismCheckWhereUniqueInput
  ): Promise<PlagiarismCheck | null> {
    const result = await this.service.plagiarismCheck({
      where: params,
      select: {
        checkResult: {
          select: {
            id: true,
          },
        },

        createdAt: true,

        document: {
          select: {
            id: true,
          },
        },

        id: true,
        status: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PlagiarismCheck })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePlagiarismCheck(
    @common.Param() params: PlagiarismCheckWhereUniqueInput,
    @common.Body() data: PlagiarismCheckUpdateInput
  ): Promise<PlagiarismCheck | null> {
    try {
      return await this.service.updatePlagiarismCheck({
        where: params,
        data: {
          ...data,

          checkResult: data.checkResult
            ? {
                connect: data.checkResult,
              }
            : undefined,

          document: data.document
            ? {
                connect: data.document,
              }
            : undefined,
        },
        select: {
          checkResult: {
            select: {
              id: true,
            },
          },

          createdAt: true,

          document: {
            select: {
              id: true,
            },
          },

          id: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PlagiarismCheck })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePlagiarismCheck(
    @common.Param() params: PlagiarismCheckWhereUniqueInput
  ): Promise<PlagiarismCheck | null> {
    try {
      return await this.service.deletePlagiarismCheck({
        where: params,
        select: {
          checkResult: {
            select: {
              id: true,
            },
          },

          createdAt: true,

          document: {
            select: {
              id: true,
            },
          },

          id: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
