/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  PlagiarismCheck as PrismaPlagiarismCheck,
  CheckResult as PrismaCheckResult,
  Document as PrismaDocument,
} from "@prisma/client";

export class PlagiarismCheckServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PlagiarismCheckCountArgs, "select">
  ): Promise<number> {
    return this.prisma.plagiarismCheck.count(args);
  }

  async plagiarismChecks(
    args: Prisma.PlagiarismCheckFindManyArgs
  ): Promise<PrismaPlagiarismCheck[]> {
    return this.prisma.plagiarismCheck.findMany(args);
  }
  async plagiarismCheck(
    args: Prisma.PlagiarismCheckFindUniqueArgs
  ): Promise<PrismaPlagiarismCheck | null> {
    return this.prisma.plagiarismCheck.findUnique(args);
  }
  async createPlagiarismCheck(
    args: Prisma.PlagiarismCheckCreateArgs
  ): Promise<PrismaPlagiarismCheck> {
    return this.prisma.plagiarismCheck.create(args);
  }
  async updatePlagiarismCheck(
    args: Prisma.PlagiarismCheckUpdateArgs
  ): Promise<PrismaPlagiarismCheck> {
    return this.prisma.plagiarismCheck.update(args);
  }
  async deletePlagiarismCheck(
    args: Prisma.PlagiarismCheckDeleteArgs
  ): Promise<PrismaPlagiarismCheck> {
    return this.prisma.plagiarismCheck.delete(args);
  }

  async getCheckResult(parentId: string): Promise<PrismaCheckResult | null> {
    return this.prisma.plagiarismCheck
      .findUnique({
        where: { id: parentId },
      })
      .checkResult();
  }

  async getDocument(parentId: string): Promise<PrismaDocument | null> {
    return this.prisma.plagiarismCheck
      .findUnique({
        where: { id: parentId },
      })
      .document();
  }
}
